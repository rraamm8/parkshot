package com.parkshot.handler;

import java.io.IOException;

import org.springframework.http.HttpHeaders;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import com.parkshot.domain.Member;
import com.parkshot.domain.Role;
import com.parkshot.persistence.MemberRepository;
import com.parkshot.util.CustomMyUtil;
import com.parkshot.util.JWTUtil;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@Component
public class OAuth2SuccessHandler extends SimpleUrlAuthenticationSuccessHandler {
	
	private final MemberRepository memberRepo;
	
	private final PasswordEncoder encoder;

	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		log.info("OAuth2SuccessHandler:onAuthenticationSuccess");
		
		OAuth2User user = (OAuth2User) authentication.getPrincipal();
		
		// 임의의 사용자를 만들어서 서버에저장
		String username = CustomMyUtil.getUsernameFromOAuth2User(user);
		if (username == null) {
			log.error("onAuthenticationSuccess:Cannot generate username from oauth2user!");
			throw new ServletException("Cannot generate username from oauth2user!");
		}
		
		// name 만들어서 서버에 저장
		String name = (String) user.getAttributes().get("name");
	    if (name == null || name.isEmpty()) {
	        log.warn("onAuthenticationSuccess: 'name' attribute is missing, defaulting to '아무개'.");
	        name = "아무개"; // 기본값 설정
	    }
	    
	    log.info("onAuthenticationSuccess: username = {}, name = {}", username, name);
		
		memberRepo.save(Member.builder()
				.username(username)
				.password(encoder.encode("1a2s3d4f"))
				.role(Role.ROLE_MEMBER)
				.nickname(name)
				.enabled(true)
				.build());
		
		String jwtToken = JWTUtil.getJWT(username);
		response.addHeader(HttpHeaders.AUTHORIZATION, jwtToken);
		
		String redirectUrl = "http://localhost:3000/home"; // 리다이렉트할 URL
        getRedirectStrategy().sendRedirect(request, response, redirectUrl);
	}

}
