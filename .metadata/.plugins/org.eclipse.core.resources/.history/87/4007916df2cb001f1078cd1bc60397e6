package com.parkshot.controller;



import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.parkshot.domain.Member;
import com.parkshot.persistence.MemberRepository;
import com.parkshot.service.MemberService;

import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/member")
@CrossOrigin(origins = "http://localhost:3000")
public class MemberController {
	
	@Autowired
	private MemberService memberService;
	
	@Autowired
	private MemberRepository memberRepo;

	@PostMapping("/register")
	public ResponseEntity<String> registerMember(@RequestBody Member member) {
		memberService.registerMember(member);
		return ResponseEntity.ok("회원가입 성공");
	}
	
	@GetMapping("/checkUsername")
    public ResponseEntity<?> checkUsername(@RequestParam String username) {
        boolean exists = memberRepo.existsByUsername(username);
        return ResponseEntity.ok(Map.of("available", !exists));
    }

    @GetMapping("/checkNickname")
    public ResponseEntity<?> checkNickname(@RequestParam String nickname) {
        boolean exists = memberRepo.existsByNickname(nickname);
        return ResponseEntity.ok(Map.of("available", !exists));
    }
    
    @GetMapping("/{username}")
    public Optional<Member> findByUsername(@PathVariable String username) {
        return memberRepo.findByUsername(username);
    }
    
    @GetMapping("/oauth")
    public @ResponseBody String auth(@AuthenticationPrincipal OAuth2User user) {
    if (user == null) return"OAuth2:null";
    // 자동회원가입을한다면이용할정보확인
   System.out.println("attributes:"+ user.getAttributes());
    return"OAuth2:" + user;}

}
